snippet c class
	class="${1}"

snippet ti Tap inspect
	|> tap(&IO.dbg(&1, pretty: true, label: "!!! $1"))

snippet td Tap debug
	|> tap(&dbg(&1))

snippet # String interpolation
  #{${1}}${2}

snippet i Inspect
	IO.puts("!!! ${1:expression}"); IO.inspect($1, limit: :infinity)

snippet p IO.puts
	IO.puts("!!! ${1:expr} #{$1}")

snippet pp Phoenix IO.puts, pretty: true
	IO.puts ~s(\n\n!!! ${1:expression}${2:: #{inspect $1, pretty: true}}\n)

snippet % %{}
	%{${1:conn}: ${2:$1}$3}

snippet defm defmodule
	defmodule ${1:Module} do
		${2}
	end

snippet m %{}
	%{$1}$2

snippet ms %{foo: foo}
	%{${1:foo}: $1 $2}

snippet mq %{foo" => foo}"
	%{"${1:foo}" => $1 $2}

snippet mm %{}
	%${1}{${2}}

snippet , map pair
	, ${1}: $1 ${2}

# snippet , "map pair"
# 	${1}: $1, ${2}

snippet ; map pair with strings as keys
	, "${1}" => $1 ${2}

# snippet ; "map pair with strings as keys"
# 	"${1}" => $1, ${2}

snippet rS raise STOP
	raise "STOP"

snippet d pipe dbg
	|> dbg

snippet H ~H
	~H"""
	${1}
	"""

snippet = <%= %>
	<%= ${1} %>

snippet from Ecto from
	from(
		$1
	)

snippet ii "piped inspect"
	|> IO.inspect(label: "!!!${1}")

snippet dmount "def mount"
	def mount(%{${1}}, _session, socket) do
		{:ok, assign(socket, %{})}
	end
